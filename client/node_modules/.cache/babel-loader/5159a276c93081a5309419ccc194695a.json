{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\sodaProject\\\\client\\\\src\\\\components\\\\vendingMachine\\\\ControlPanel\\\\ControlPanel.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { purchaseSoda, fetchSodaData, postSodaStock } from '../../../redux/sodaOperations/sodaSlice';\nimport { saveAs } from 'file-saver';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport TextField from '@mui/material/TextField'; //given an object convert to JSON\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction fileDownLoad(soda, purchaseQty) {\n  let purchase = {\n    name: soda.name,\n    price: soda.price,\n    desc: soda.desc,\n    qty: purchaseQty\n  };\n  let sodaJSON = new Blob([JSON.stringify(purchase, null, 4)], {\n    type: \"application/json\"\n  });\n  saveAs(sodaJSON, \"soda.json\");\n}\n\nexport default function ControlPanel() {\n  _s();\n\n  const dispatch = useDispatch();\n  const sodaData = useSelector(state => state.sodaState.sodas); //move this up a component\n  //create another one that will update after a successful purchase\n  //call 2 thunk, updateSodaStock and then fetchSodaData\n\n  useEffect(() => {\n    dispatch(fetchSodaData());\n    setSoda(sodaData);\n    setSelectedSoda(sodaData[0]);\n  }, []);\n  const [open, setOpen] = React.useState(false);\n  const [succesfulPurchase, setSuccessfulPurcahse] = React.useState(false);\n  const [sodas, setSoda] = React.useState([]);\n  const [selectedSoda, setSelectedSoda] = React.useState(); //cola is the default\n\n  const [qty, setQty] = React.useState(0); //soda quantity\n  //keeps track of soda selected\n\n  const handleSodaInput = event => {\n    let sodaId = event.target.value;\n    console.log(sodaId);\n    setSelectedSoda(sodas.find(soda => sodaId = soda._id));\n    console.log(selectedSoda);\n  };\n\n  function purchase(soda, sodaQty) {\n    //qty check\n    console.log('purchase attempt');\n    console.log(soda);\n\n    if (sodaQty > soda.quantity) {\n      alert(`Only ${soda.quantity} ${soda.name} available`);\n    } else {\n      // fileDownLoad(soda, sodaQty);\n      //update soda Quantity\n      let newQTY = soda.quantity - sodaQty;\n      let purchasedAmount = parseInt(sodaQty);\n      setSuccessfulPurcahse(true);\n      let payload = {\n        id: soda._id,\n        purchasedAmount: purchasedAmount,\n        remainingStock: newQTY\n      };\n      dispatch(purchaseSoda(payload));\n    }\n  } //opens control panel\n\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  }; //closes control panel\n\n\n  const handleClose = (event, reason) => {\n    if (reason !== 'backdropClick') {\n      setOpen(false);\n      setQty(0);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controlPanel\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClickOpen,\n      children: \"Control Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      disableEscapeKeyDown: true,\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Soda Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          sx: {\n            display: 'flex',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              native: true,\n              onChange: event => {\n                let sodaId = event.target.value;\n                setSelectedSoda(sodas.find(soda => sodaId === soda._id));\n              },\n              children: sodas.map(soda => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: soda._id,\n                children: soda.name\n              }, soda._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              inputProps: {\n                inputMode: 'numeric',\n                pattern: '[0-9]*'\n              },\n              id: \"outlined-basic\",\n              label: \"Qty\",\n              variant: \"outlined\",\n              value: qty,\n              onChange: event => setQty(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            handleClose();\n            purchase(selectedSoda, qty);\n          },\n          children: \"Purchase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ControlPanel, \"m4C6PwbJnft61CDK8jeRHIjuBHc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ControlPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControlPanel\");","map":{"version":3,"sources":["C:/webdev/sodaProject/client/src/components/vendingMachine/ControlPanel/ControlPanel.jsx"],"names":["React","useEffect","useSelector","useDispatch","purchaseSoda","fetchSodaData","postSodaStock","saveAs","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","FormControl","Select","TextField","fileDownLoad","soda","purchaseQty","purchase","name","price","desc","qty","sodaJSON","Blob","JSON","stringify","type","ControlPanel","dispatch","sodaData","state","sodaState","sodas","setSoda","setSelectedSoda","open","setOpen","useState","succesfulPurchase","setSuccessfulPurcahse","selectedSoda","setQty","handleSodaInput","event","sodaId","target","value","console","log","find","_id","sodaQty","quantity","alert","newQTY","purchasedAmount","parseInt","payload","id","remainingStock","handleClickOpen","handleClose","reason","display","flexWrap","m","minWidth","map","inputMode","pattern"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { purchaseSoda, fetchSodaData, postSodaStock } from '../../../redux/sodaOperations/sodaSlice';\r\n\r\nimport { saveAs } from 'file-saver';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n//given an object convert to JSON\r\nfunction fileDownLoad (soda, purchaseQty) {\r\n  let purchase = {\r\n    name: soda.name,\r\n    price: soda.price,\r\n    desc: soda.desc,\r\n    qty: purchaseQty\r\n  }\r\n  let sodaJSON = new Blob(\r\n    [JSON.stringify(purchase, null,4)],\r\n    {\r\n      type: \"application/json\"\r\n    }\r\n  )\r\n  saveAs(sodaJSON, \"soda.json\")\r\n}\r\n\r\nexport default function ControlPanel() {\r\n  const dispatch = useDispatch()\r\n  const sodaData = useSelector(state => state.sodaState.sodas)\r\n  \r\n\r\n  //move this up a component\r\n  //create another one that will update after a successful purchase\r\n  //call 2 thunk, updateSodaStock and then fetchSodaData\r\n  useEffect(() => {\r\n    dispatch(fetchSodaData())\r\n    setSoda(sodaData)\r\n    setSelectedSoda(sodaData[0])\r\n  }, [])\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [succesfulPurchase, setSuccessfulPurcahse] = React.useState(false);\r\n  const [sodas, setSoda] = React.useState([]);\r\n  const [selectedSoda, setSelectedSoda] = React.useState();//cola is the default\r\n  const [qty, setQty] = React.useState(0);//soda quantity\r\n  \r\n  //keeps track of soda selected\r\n  const handleSodaInput = (event) => {\r\n    let sodaId = event.target.value\r\n    console.log(sodaId)\r\n\r\n    setSelectedSoda(sodas.find(soda => sodaId = soda._id));\r\n    console.log(selectedSoda)\r\n  };\r\n\r\nfunction purchase(soda, sodaQty){\r\n  //qty check\r\n  console.log('purchase attempt')\r\n  console.log(soda)\r\n  if(sodaQty > soda.quantity){\r\n    alert(`Only ${soda.quantity} ${soda.name} available`);\r\n  }else{\r\n    // fileDownLoad(soda, sodaQty);\r\n    //update soda Quantity\r\n    let newQTY = soda.quantity - sodaQty;\r\n    let purchasedAmount = parseInt(sodaQty)\r\n    setSuccessfulPurcahse(true);\r\n    let payload = {id: soda._id, purchasedAmount: purchasedAmount, remainingStock: newQTY}\r\n    dispatch(purchaseSoda(payload))\r\n  }\r\n}\r\n  //opens control panel\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  //closes control panel\r\n  const handleClose = (event, reason) => {\r\n    if (reason !== 'backdropClick') {\r\n      setOpen(false);\r\n      setQty(0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='controlPanel'>\r\n      <Button onClick={handleClickOpen}>Control Panel</Button>\r\n      <Dialog disableEscapeKeyDown open={open} onClose={handleClose}>\r\n        <DialogTitle>Soda Selection</DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" sx={{ display: 'flex', flexWrap: 'wrap' }}>\r\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n              <Select\r\n                native\r\n                onChange={(event) => {\r\n                  let sodaId = event.target.value\r\n                  setSelectedSoda(sodas.find(soda => sodaId === soda._id));                  \r\n                }}\r\n              >\r\n                {/* {sodas.map} */}\r\n                {sodas.map(soda => (\r\n                  <option key={soda._id} value={soda._id}>{soda.name}</option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n              <TextField inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }} id=\"outlined-basic\" label=\"Qty\" variant=\"outlined\" value={qty} onChange={(event)=>setQty(event.target.value)}/>\r\n            </FormControl>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={() =>{\r\n            handleClose();\r\n            purchase(selectedSoda,qty);\r\n          }}>\r\n            Purchase\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}