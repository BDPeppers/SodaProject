{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\sodaProject\\\\soda-app\\\\src\\\\components\\\\vendingMachine\\\\ControlPanel\\\\ControlPanel.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { purchaseSoda, fetchSodaData } from '../../../redux/sodaOperations/sodaSlice';\nimport * as api from '../../../sodaApi/api';\nimport { saveAs } from 'file-saver';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport TextField from '@mui/material/TextField'; //given an object convert to JSON\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction fileDownLoad(soda, purchaseQty) {\n  let purchase = {\n    name: soda.name,\n    price: soda.price,\n    desc: soda.desc,\n    qty: purchaseQty\n  };\n  let sodaJSON = new Blob([JSON.stringify(purchase, null, 4)], {\n    type: \"application/json\"\n  });\n  saveAs(sodaJSON, \"soda.json\");\n}\n\nexport default function ControlPanel() {\n  _s();\n\n  const dispatch = useDispatch(fetchSodaData);\n  const sodaData = useSelector(state => state.sodaSlice.sodas);\n  console.log(sodaData);\n  const [open, setOpen] = React.useState(false);\n  const [succesfulPurchase, setSuccessfulPurcahse] = React.useState(false);\n  const [sodas, setSoda] = React.useState(sodaData); //sodaList\n\n  const [selectedSoda, setSelectedSoda] = React.useState(); //cola is the default\n\n  const [qty, setQty] = React.useState(0); //soda quantity\n\n  function setInitialSodaStates(data) {\n    setSoda(data);\n    setSelectedSoda(data[0]);\n  } //keeps track of soda selected\n\n\n  const handleSodaInput = event => {\n    setSelectedSoda(event.target.value);\n  }; //keeps track of soda quantity input\n\n\n  const handleQtyInput = event => {\n    setQty(Number(event.target.value) || '');\n  };\n\n  function purchase(soda, sodaQty) {\n    //qty check\n    console.log(sodaQty);\n    console.log(selectedSoda);\n    console.log(selectedSoda.quantity);\n\n    if (sodaQty > selectedSoda.quantity) {\n      alert(`Only ${soda.quantity} ${soda.name} available`);\n    } else {\n      fileDownLoad(soda, sodaQty); //update soda Quantity\n\n      selectedSoda.quantity = selectedSoda.quantity - sodaQty;\n      console.log(selectedSoda.quantity);\n      console.log(selectedSoda);\n      setSuccessfulPurcahse(true);\n      dispatch(purchaseSoda(soda.id, sodaQty));\n    }\n  } //opens control panel\n\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  }; //closes control panel\n\n\n  const handleClose = (event, reason) => {\n    if (reason !== 'backdropClick') {\n      setOpen(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controlPanel\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClickOpen,\n      children: \"Control Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      disableEscapeKeyDown: true,\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Soda Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          sx: {\n            display: 'flex',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              native: true,\n              onChange: handleSodaInput,\n              children: sodas.map(x => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: x.value,\n                children: x.name\n              }, x._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              inputProps: {\n                inputMode: 'numeric',\n                pattern: '[0-9]*'\n              },\n              id: \"outlined-basic\",\n              label: \"Qty\",\n              variant: \"outlined\",\n              value: qty,\n              onChange: event => handleQtyInput(event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            handleClose();\n            purchase(selectedSoda, qty);\n          },\n          children: \"Purchase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ControlPanel, \"p7GCCUlUV0IaV42BQN+KpCnaUcA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ControlPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControlPanel\");","map":{"version":3,"sources":["C:/webdev/sodaProject/soda-app/src/components/vendingMachine/ControlPanel/ControlPanel.jsx"],"names":["React","useEffect","useSelector","useDispatch","purchaseSoda","fetchSodaData","api","saveAs","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","FormControl","Select","TextField","fileDownLoad","soda","purchaseQty","purchase","name","price","desc","qty","sodaJSON","Blob","JSON","stringify","type","ControlPanel","dispatch","sodaData","state","sodaSlice","sodas","console","log","open","setOpen","useState","succesfulPurchase","setSuccessfulPurcahse","setSoda","selectedSoda","setSelectedSoda","setQty","setInitialSodaStates","data","handleSodaInput","event","target","value","handleQtyInput","Number","sodaQty","quantity","alert","id","handleClickOpen","handleClose","reason","display","flexWrap","m","minWidth","map","x","_id","inputMode","pattern"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { purchaseSoda, fetchSodaData } from '../../../redux/sodaOperations/sodaSlice';\r\n\r\nimport * as api from '../../../sodaApi/api'\r\n\r\nimport { saveAs } from 'file-saver';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n//given an object convert to JSON\r\nfunction fileDownLoad (soda, purchaseQty) {\r\n  let purchase = {\r\n    name: soda.name,\r\n    price: soda.price,\r\n    desc: soda.desc,\r\n    qty: purchaseQty\r\n  }\r\n  let sodaJSON = new Blob(\r\n    [JSON.stringify(purchase, null,4)],\r\n    {\r\n      type: \"application/json\"\r\n    }\r\n  )\r\n  saveAs(sodaJSON, \"soda.json\")\r\n}\r\n\r\nexport default function ControlPanel() {\r\n  const dispatch = useDispatch(fetchSodaData)\r\n  const sodaData = useSelector(state => state.sodaSlice.sodas)\r\n  console.log(sodaData)\r\n  \r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [succesfulPurchase, setSuccessfulPurcahse] = React.useState(false);\r\n  const [sodas, setSoda] = React.useState(sodaData);//sodaList\r\n  const [selectedSoda, setSelectedSoda] = React.useState();//cola is the default\r\n  const [qty, setQty] = React.useState(0);//soda quantity\r\n\r\n  \r\n\r\nfunction setInitialSodaStates(data){\r\n  setSoda(data);\r\n  setSelectedSoda(data[0])\r\n}\r\n  //keeps track of soda selected\r\n  const handleSodaInput = (event) => {\r\n    setSelectedSoda((event.target.value));\r\n  };\r\n\r\n  //keeps track of soda quantity input\r\n  const handleQtyInput = (event) => {\r\n    setQty(Number(event.target.value) || '');\r\n  }\r\n\r\n\r\nfunction purchase(soda, sodaQty){\r\n  //qty check\r\n  console.log(sodaQty)\r\n  console.log(selectedSoda)\r\n  console.log(selectedSoda.quantity)\r\n  if(sodaQty>selectedSoda.quantity){\r\n    alert(`Only ${soda.quantity} ${soda.name} available`);\r\n  }else{\r\n    fileDownLoad(soda, sodaQty);\r\n    //update soda Quantity\r\n    selectedSoda.quantity = selectedSoda.quantity - sodaQty;\r\n    console.log(selectedSoda.quantity)\r\n    console.log(selectedSoda)\r\n    setSuccessfulPurcahse(true);\r\n    dispatch(purchaseSoda(soda.id, sodaQty))\r\n  }\r\n}\r\n  //opens control panel\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  //closes control panel\r\n  const handleClose = (event, reason) => {\r\n    if (reason !== 'backdropClick') {\r\n      setOpen(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='controlPanel'>\r\n      <Button onClick={handleClickOpen}>Control Panel</Button>\r\n      <Dialog disableEscapeKeyDown open={open} onClose={handleClose}>\r\n        <DialogTitle>Soda Selection</DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" sx={{ display: 'flex', flexWrap: 'wrap' }}>\r\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n              <Select\r\n                native\r\n                onChange={handleSodaInput}\r\n              >\r\n                {sodas.map(x => (\r\n                  <option key={x._id} value={x.value}>{x.name}</option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n              <TextField inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }} id=\"outlined-basic\" label=\"Qty\" variant=\"outlined\" value={qty} onChange={(event)=>handleQtyInput(event)}/>\r\n            </FormControl>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={() =>{\r\n            handleClose();\r\n            purchase(selectedSoda,qty);\r\n          }}>\r\n            Purchase\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}