{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport * as sodaApi from '../../sodaApi/api'; // const sodaTest = [\n//     {\"_id\":{\"$oid\":\"61c8cef81aca48e3ce06ace0\"},\"name\":\"Cola\",\"desc\":\"A basic no nonsense cola that is the perfect pick me up for any occasion.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F6AF65\"},\n//     {\"_id\":{\"$oid\":\"61c8cf571aca48e3ce06ace1\"},\"name\":\"MegaPop\",\"desc\":\"Not for the faint of heart. So flavorful and so invigorating, it should probably be illegal.\",\"price\":\"1.0\",\"quantity\":\"25\",\"maxQuantity\":\"50\",\"available\":true,\"hexColorCode\":\"823038\"},\n//     {\"_id\":{\"$oid\":\"61c8cf6b1aca48e3ce06ace2\"},\"name\":\"Pop\",\"desc\":\"An explosion of flavor that will knock your socks off!\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"00C2D1\"},\n//     {\"_id\":{\"$oid\":\"61c8cf9f1aca48e3ce06ace3\"},\"name\":\"Fizz\",\"desc\":\"An effervescent fruity experience with hints of grape and coriander.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F9E900\"}\n//   ]\n//get soda to set initial state (thunk)\n\nexport const fetchSodaData = createAsyncThunk('soda/getSodas', async () => {\n  const response = await sodaApi.getSodas();\n  return response;\n}); //update soda price\n////Return error or success for each and update the UI accordingly\n\nexport const postSodaPrice = createAsyncThunk('sodas/updateSodaPrice', async data => {\n  const response = await sodaApi.updateSodaPrice(data.id, data.price);\n  return response;\n}); //update soda stock after purchase\n\nexport const postSodaStock = createAsyncThunk('sodas/updateSodaStock', async data => {\n  const response = await sodaApi.updateSodaStock(data.id, data.purchaseAmount, data.remainingStock);\n  return response;\n}); //restock soda\n\nexport const postRestockSoda = createAsyncThunk('sodas/restockSoda', async data => {\n  console.log(data);\n  const respone = await sodaApi.restockSoda(data.id, data.maxQty);\n  console.log(respone);\n  return respone;\n}); //redux-slice\n\nconst SodaSlice = createSlice({\n  name: 'sodaSlice',\n  initialState: {\n    loading: 'loading',\n    dropIt: 'none',\n    apiStatus: '',\n    sodas: []\n  },\n  reducers: {\n    purchaseSuccess: (state, action) => {\n      console.log(action.payload);\n\n      if (action.payload) {\n        state.dropIt = 'block';\n      } else {\n        state.dropIt = 'none';\n      }\n    },\n    updateSodaPrice: (state, action) => {\n      //call API\n      return action.payload;\n      console.log(state);\n    },\n    restockSoda: (state, action) => {\n      return action.payload;\n      console.log(state);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchSodaData.fulfilled, (state, action) => {\n      state.sodas = action.payload;\n    });\n    builder.addCase(postSodaPrice.fulfilled, (state, action) => {\n      state.apiStatus = action.payload;\n    });\n    builder.addCase(postSodaStock.fulfilled, (state, action) => {\n      state.apiStatus = action.payload;\n    });\n    builder.addCase(postRestockSoda.fulfilled, (state, action) => {\n      state.apiStatus = action.payload;\n    });\n  }\n}); //I'll need to get soda data after every update to soda data\n//to be more efficient send only updated soda information vs all soda data\n//need to create a thunk for each API call and then dispatch fetchSodaData after each operation\n\nexport const {\n  purchaseSuccess,\n  updateSodaPrice,\n  restockSoda,\n  loadingData,\n  dataLoaded\n} = SodaSlice.actions;\nexport default SodaSlice.reducer;","map":{"version":3,"sources":["C:/webdev/sodaProject/client/src/redux/sodaOperations/sodaSlice.js"],"names":["createSlice","createAsyncThunk","sodaApi","fetchSodaData","response","getSodas","postSodaPrice","data","updateSodaPrice","id","price","postSodaStock","updateSodaStock","purchaseAmount","remainingStock","postRestockSoda","console","log","respone","restockSoda","maxQty","SodaSlice","name","initialState","loading","dropIt","apiStatus","sodas","reducers","purchaseSuccess","state","action","payload","extraReducers","builder","addCase","fulfilled","loadingData","dataLoaded","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport * as sodaApi from '../../sodaApi/api'\r\n\r\n\r\n// const sodaTest = [\r\n//     {\"_id\":{\"$oid\":\"61c8cef81aca48e3ce06ace0\"},\"name\":\"Cola\",\"desc\":\"A basic no nonsense cola that is the perfect pick me up for any occasion.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F6AF65\"},\r\n//     {\"_id\":{\"$oid\":\"61c8cf571aca48e3ce06ace1\"},\"name\":\"MegaPop\",\"desc\":\"Not for the faint of heart. So flavorful and so invigorating, it should probably be illegal.\",\"price\":\"1.0\",\"quantity\":\"25\",\"maxQuantity\":\"50\",\"available\":true,\"hexColorCode\":\"823038\"},\r\n//     {\"_id\":{\"$oid\":\"61c8cf6b1aca48e3ce06ace2\"},\"name\":\"Pop\",\"desc\":\"An explosion of flavor that will knock your socks off!\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"00C2D1\"},\r\n//     {\"_id\":{\"$oid\":\"61c8cf9f1aca48e3ce06ace3\"},\"name\":\"Fizz\",\"desc\":\"An effervescent fruity experience with hints of grape and coriander.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F9E900\"}\r\n//   ]\r\n\r\n//get soda to set initial state (thunk)\r\nexport const fetchSodaData = createAsyncThunk(\r\n    'soda/getSodas',\r\n    async () => {\r\n        const response = await sodaApi.getSodas();\r\n        return response;\r\n});\r\n\r\n//update soda price\r\n////Return error or success for each and update the UI accordingly\r\nexport const postSodaPrice = createAsyncThunk(\r\n    'sodas/updateSodaPrice',\r\n    async (data) => {\r\n        const response = await sodaApi.updateSodaPrice(data.id, data.price);\r\n        return response;\r\n})\r\n\r\n//update soda stock after purchase\r\nexport const postSodaStock = createAsyncThunk(\r\n    'sodas/updateSodaStock',\r\n    async (data) => {\r\n        const response = await sodaApi.updateSodaStock(data.id, data.purchaseAmount, data.remainingStock);\r\n        return response;\r\n    }\r\n)\r\n\r\n//restock soda\r\nexport const postRestockSoda = createAsyncThunk(\r\n    'sodas/restockSoda',\r\n    async (data) => {\r\n        console.log(data)\r\n        const respone = await sodaApi.restockSoda(data.id, data.maxQty)\r\n        console.log(respone)\r\n        return respone;\r\n    }\r\n)\r\n\r\n\r\n//redux-slice\r\nconst SodaSlice = createSlice({\r\n    name: 'sodaSlice',\r\n    initialState: {\r\n        loading: 'loading',\r\n        dropIt: 'none',\r\n        apiStatus: '',\r\n        sodas: []\r\n    },\r\n    reducers : {\r\n        purchaseSuccess: (state, action) => {\r\n            console.log(action.payload)\r\n            if(action.payload){\r\n                state.dropIt = 'block'\r\n            }else{\r\n                state.dropIt = 'none'\r\n            }\r\n            \r\n        },\r\n        updateSodaPrice: (state, action) => {\r\n            //call API\r\n            return action.payload\r\n            console.log(state)\r\n        },\r\n        restockSoda: (state, action) => {\r\n            return action.payload\r\n            console.log(state)\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchSodaData.fulfilled, (state, action) => {\r\n            state.sodas = action.payload\r\n        })\r\n        builder.addCase(postSodaPrice.fulfilled, (state, action) => {\r\n            state.apiStatus = action.payload\r\n        })\r\n        builder.addCase(postSodaStock.fulfilled, (state, action) => {\r\n            state.apiStatus = action.payload\r\n        })\r\n        builder.addCase(postRestockSoda.fulfilled, (state, action) => {\r\n            state.apiStatus = action.payload\r\n        })\r\n    }\r\n})\r\n\r\n//I'll need to get soda data after every update to soda data\r\n//to be more efficient send only updated soda information vs all soda data\r\n\r\n\r\n//need to create a thunk for each API call and then dispatch fetchSodaData after each operation\r\n\r\nexport const {purchaseSuccess, updateSodaPrice, restockSoda, loadingData, dataLoaded} = SodaSlice.actions\r\nexport default SodaSlice.reducer"]},"metadata":{},"sourceType":"module"}