{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport * as sodaApi from '../../sodaApi/api'; // const sodaTest = [\n//     {\"_id\":{\"$oid\":\"61c8cef81aca48e3ce06ace0\"},\"name\":\"Cola\",\"desc\":\"A basic no nonsense cola that is the perfect pick me up for any occasion.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F6AF65\"},\n//     {\"_id\":{\"$oid\":\"61c8cf571aca48e3ce06ace1\"},\"name\":\"MegaPop\",\"desc\":\"Not for the faint of heart. So flavorful and so invigorating, it should probably be illegal.\",\"price\":\"1.0\",\"quantity\":\"25\",\"maxQuantity\":\"50\",\"available\":true,\"hexColorCode\":\"823038\"},\n//     {\"_id\":{\"$oid\":\"61c8cf6b1aca48e3ce06ace2\"},\"name\":\"Pop\",\"desc\":\"An explosion of flavor that will knock your socks off!\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"00C2D1\"},\n//     {\"_id\":{\"$oid\":\"61c8cf9f1aca48e3ce06ace3\"},\"name\":\"Fizz\",\"desc\":\"An effervescent fruity experience with hints of grape and coriander.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F9E900\"}\n//   ]\n//get soda to set initial state (thunk)\n\nexport const fetchSodaData = createAsyncThunk('soda/getSodas', async () => {\n  const response = await sodaApi.getSodas();\n  console.log(response.data);\n  return response.data;\n}); //update soda price\n//update soda stock after purchase\n//restock soda\n//redux-slice\n\nconst SodaSlice = createSlice({\n  name: 'sodaSlice',\n  initialState: {\n    loading: 'loading',\n    sodas: []\n  },\n  reducers: {\n    purchaseSoda: (state, action) => {\n      return action.payload;\n    },\n    updateSodaPrice: (state, action) => {\n      return action.payload;\n      console.log(state);\n    },\n    restockSoda: (state, action) => {\n      return action.payload;\n      console.log(state);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchSodaData.fulfilled, (state, action) => {\n      //set soda data\n      state.sodas = action.payload;\n      console.log(state.sodas);\n    });\n  }\n}); //I'll need to get soda data after every update to soda data\n//to be more efficient send only updated soda information vs all soda data\n//need to create a thunk for each API call\n\nexport const {\n  purchaseSoda,\n  updateSodaPrice,\n  restockSoda,\n  loadingData,\n  dataLoaded\n} = SodaSlice.actions;\nexport default SodaSlice.reducer;","map":{"version":3,"sources":["C:/webdev/sodaProject/soda-app/src/redux/sodaOperations/sodaSlice.js"],"names":["createSlice","createAsyncThunk","sodaApi","fetchSodaData","response","getSodas","console","log","data","SodaSlice","name","initialState","loading","sodas","reducers","purchaseSoda","state","action","payload","updateSodaPrice","restockSoda","extraReducers","builder","addCase","fulfilled","loadingData","dataLoaded","actions","reducer"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,gBAArB,QAA4C,kBAA5C;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CACzC,eADyC,EAEzC,YAAY;AACR,QAAMG,QAAQ,GAAG,MAAMF,OAAO,CAACG,QAAR,EAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACA,SAAOJ,QAAQ,CAACI,IAAhB;AACP,CAN4C,CAAtC,C,CAQP;AAGA;AAGA;AAEA;;AACA,MAAMC,SAAS,GAAGT,WAAW,CAAC;AAC1BU,EAAAA,IAAI,EAAE,WADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,OAAO,EAAE,SADC;AAEVC,IAAAA,KAAK,EAAE;AAFG,GAFY;AAM1BC,EAAAA,QAAQ,EAAG;AACPC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B,aAAOA,MAAM,CAACC,OAAd;AACH,KAHM;AAIPC,IAAAA,eAAe,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAEhC,aAAOA,MAAM,CAACC,OAAd;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACH,KARM;AASPI,IAAAA,WAAW,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC5B,aAAOA,MAAM,CAACC,OAAd;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACH;AAZM,GANe;AAoB1BK,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,aAAa,CAACqB,SAA9B,EAAyC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACxD;AACAD,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC,OAArB;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAK,CAACH,KAAlB;AACH,KAJD;AAKH;AA1ByB,CAAD,CAA7B,C,CA6BA;AACA;AAGA;;AAEA,OAAO,MAAM;AAACE,EAAAA,YAAD;AAAeI,EAAAA,eAAf;AAAgCC,EAAAA,WAAhC;AAA6CK,EAAAA,WAA7C;AAA0DC,EAAAA;AAA1D,IAAwEjB,SAAS,CAACkB,OAAxF;AACP,eAAelB,SAAS,CAACmB,OAAzB","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport * as sodaApi from '../../sodaApi/api'\r\n\r\n\r\n// const sodaTest = [\r\n//     {\"_id\":{\"$oid\":\"61c8cef81aca48e3ce06ace0\"},\"name\":\"Cola\",\"desc\":\"A basic no nonsense cola that is the perfect pick me up for any occasion.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F6AF65\"},\r\n//     {\"_id\":{\"$oid\":\"61c8cf571aca48e3ce06ace1\"},\"name\":\"MegaPop\",\"desc\":\"Not for the faint of heart. So flavorful and so invigorating, it should probably be illegal.\",\"price\":\"1.0\",\"quantity\":\"25\",\"maxQuantity\":\"50\",\"available\":true,\"hexColorCode\":\"823038\"},\r\n//     {\"_id\":{\"$oid\":\"61c8cf6b1aca48e3ce06ace2\"},\"name\":\"Pop\",\"desc\":\"An explosion of flavor that will knock your socks off!\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"00C2D1\"},\r\n//     {\"_id\":{\"$oid\":\"61c8cf9f1aca48e3ce06ace3\"},\"name\":\"Fizz\",\"desc\":\"An effervescent fruity experience with hints of grape and coriander.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F9E900\"}\r\n//   ]\r\n\r\n//get soda to set initial state (thunk)\r\nexport const fetchSodaData = createAsyncThunk(\r\n    'soda/getSodas',\r\n    async () => {\r\n        const response = await sodaApi.getSodas()\r\n        console.log(response.data)\r\n        return response.data;\r\n})\r\n\r\n//update soda price\r\n\r\n\r\n//update soda stock after purchase\r\n\r\n\r\n//restock soda\r\n\r\n//redux-slice\r\nconst SodaSlice = createSlice({\r\n    name: 'sodaSlice',\r\n    initialState: {\r\n        loading: 'loading',\r\n        sodas: []\r\n    },\r\n    reducers : {\r\n        purchaseSoda: (state, action) => {\r\n            return action.payload\r\n        },\r\n        updateSodaPrice: (state, action) => {\r\n\r\n            return action.payload\r\n            console.log(state)\r\n        },\r\n        restockSoda: (state, action) => {\r\n            return action.payload\r\n            console.log(state)\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchSodaData.fulfilled, (state, action) => {\r\n            //set soda data\r\n            state.sodas = action.payload\r\n            console.log(state.sodas)\r\n        })\r\n    }\r\n})\r\n\r\n//I'll need to get soda data after every update to soda data\r\n//to be more efficient send only updated soda information vs all soda data\r\n\r\n\r\n//need to create a thunk for each API call\r\n\r\nexport const {purchaseSoda, updateSodaPrice, restockSoda, loadingData, dataLoaded} = SodaSlice.actions\r\nexport default SodaSlice.reducer"]},"metadata":{},"sourceType":"module"}