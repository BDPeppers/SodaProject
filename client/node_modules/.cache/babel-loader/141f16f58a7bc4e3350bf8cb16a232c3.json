{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\sodaProject\\\\client\\\\src\\\\components\\\\vendingMachine\\\\ControlPanel\\\\ControlPanel.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchSodaData, postSodaStock, purchaseSuccess } from '../../../redux/sodaOperations/sodaSlice'; // import { saveAs } from 'file-saver';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport TextField from '@mui/material/TextField'; //given an object convert to JSON\n// function fileDownLoad (soda, purchaseQty) {\n//   let purchase = {\n//     name: soda.name,\n//     price: soda.price,\n//     desc: soda.desc,\n//     qty: purchaseQty\n//   }\n//   let sodaJSON = new Blob(\n//     [JSON.stringify(purchase, null,4)],\n//     {\n//       type: \"application/json\"\n//     }\n//   )\n//   saveAs(sodaJSON, \"soda.json\")\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ControlPanel() {\n  _s();\n\n  const dispatch = useDispatch();\n  const sodaData = useSelector(state => state.sodaState.sodas);\n  const [open, setOpen] = React.useState(false);\n  const [sodas, setSoda] = React.useState(sodaData);\n  const [selectedSoda, setSelectedSoda] = React.useState(); //cola is the default\n\n  const [qty, setQty] = React.useState(0);\n  useEffect(() => {\n    dispatch(fetchSodaData());\n    setSoda(sodaData);\n    setSelectedSoda(sodaData[0]);\n  }, [open]);\n\n  function purchase(soda, sodaQty) {\n    //qty check\n    console.log('purchase attempt');\n    console.log(soda); //check if soda is available\n\n    if (soda.quantity == 0) {\n      alert(`${soda.name} has sold out -> Please Restock on Inventory page`);\n      return;\n    } //validate user input\n\n\n    if (sodaQty == 0) {\n      alert('Please enter a QTY to purchase');\n      return;\n    } //validate user input + complete purchase\n\n\n    if (sodaQty > soda.quantity) {\n      alert(`Error: ${soda.quantity} ${soda.name} available`);\n    } else {\n      // fileDownLoad(soda, sodaQty);\n      //update soda Quantity\n      let newQTY = soda.quantity - sodaQty;\n      let purchasedAmount = parseInt(sodaQty) + parseInt(soda.purchased);\n      let payload = {\n        id: soda._id,\n        purchaseAmount: purchasedAmount,\n        remainingStock: newQTY\n      };\n      dispatch(postSodaStock(payload));\n      dispatch(purchaseSuccess(true));\n    }\n  } //opens control panel -> mui function\n\n\n  const handleClickOpen = () => {\n    setOpen(true);\n    dispatch(purchaseSuccess(false));\n  }; //closes control panel -> mui function\n\n\n  const handleClose = (event, reason) => {\n    if (reason !== 'backdropClick') {\n      setOpen(false);\n      setQty(0);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controlPanel\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClickOpen,\n      children: \"Control Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      disableEscapeKeyDown: true,\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        className: \"control-panel-header\",\n        children: \"Soda Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          className: \"control-panel-selection-box\",\n          component: \"form\",\n          sx: {\n            display: 'flex',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              className: \"control-panel-soda-select\",\n              native: true,\n              onChange: event => {\n                let sodaId = event.target.value;\n                setSelectedSoda(sodas.find(soda => sodaId === soda._id));\n              },\n              children: sodas.map(soda => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: soda._id,\n                children: soda.name\n              }, soda._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            className: \"control-panel-soda-qty\",\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              inputProps: {\n                inputMode: 'numeric',\n                pattern: '[0-9]*'\n              },\n              id: \"outlined-basic\",\n              label: \"Qty\",\n              variant: \"outlined\",\n              value: qty,\n              onChange: event => setQty(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        className: \"control-panel-btn-box\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            handleClose();\n            purchase(selectedSoda, qty);\n          },\n          children: \"Purchase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ControlPanel, \"9adQk4anpFfaUaOAyxCEpkYiUaE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ControlPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControlPanel\");","map":{"version":3,"sources":["C:/webdev/sodaProject/client/src/components/vendingMachine/ControlPanel/ControlPanel.jsx"],"names":["React","useEffect","useSelector","useDispatch","fetchSodaData","postSodaStock","purchaseSuccess","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","FormControl","Select","TextField","ControlPanel","dispatch","sodaData","state","sodaState","sodas","open","setOpen","useState","setSoda","selectedSoda","setSelectedSoda","qty","setQty","purchase","soda","sodaQty","console","log","quantity","alert","name","newQTY","purchasedAmount","parseInt","purchased","payload","id","_id","purchaseAmount","remainingStock","handleClickOpen","handleClose","event","reason","display","flexWrap","m","minWidth","sodaId","target","value","find","map","inputMode","pattern"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,eAAvC,QAA8D,yCAA9D,C,CAEA;;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAMe,QAAQ,GAAGhB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBC,KAA1B,CAA5B;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBvB,KAAK,CAACwB,QAAN,CAAe,KAAf,CAAxB;AACA,QAAM,CAACH,KAAD,EAAQI,OAAR,IAAmBzB,KAAK,CAACwB,QAAN,CAAeN,QAAf,CAAzB;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkC3B,KAAK,CAACwB,QAAN,EAAxC,CANqC,CAMoB;;AACzD,QAAM,CAACI,GAAD,EAAMC,MAAN,IAAgB7B,KAAK,CAACwB,QAAN,CAAe,CAAf,CAAtB;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,QAAQ,CAACb,aAAa,EAAd,CAAR;AACAqB,IAAAA,OAAO,CAACP,QAAD,CAAP;AACAS,IAAAA,eAAe,CAACT,QAAQ,CAAC,CAAD,CAAT,CAAf;AACD,GAJQ,EAIN,CAACI,IAAD,CAJM,CAAT;;AAOA,WAASQ,QAAT,CAAkBC,IAAlB,EAAwBC,OAAxB,EAAgC;AAC9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAH8B,CAK9B;;AACA,QAAGA,IAAI,CAACI,QAAL,IAAiB,CAApB,EAAsB;AACpBC,MAAAA,KAAK,CAAE,GAAEL,IAAI,CAACM,IAAK,mDAAd,CAAL;AACA;AACD,KAT6B,CAW9B;;;AACA,QAAGL,OAAO,IAAI,CAAd,EAAgB;AACdI,MAAAA,KAAK,CAAC,gCAAD,CAAL;AACA;AACD,KAf6B,CAiB9B;;;AACA,QAAGJ,OAAO,GAAGD,IAAI,CAACI,QAAlB,EAA2B;AACzBC,MAAAA,KAAK,CAAE,UAASL,IAAI,CAACI,QAAS,IAAGJ,IAAI,CAACM,IAAK,YAAtC,CAAL;AACD,KAFD,MAEK;AACH;AAEA;AACA,UAAIC,MAAM,GAAGP,IAAI,CAACI,QAAL,GAAgBH,OAA7B;AAEA,UAAIO,eAAe,GAAGC,QAAQ,CAACR,OAAD,CAAR,GAAoBQ,QAAQ,CAACT,IAAI,CAACU,SAAN,CAAlD;AAEA,UAAIC,OAAO,GAAG;AAACC,QAAAA,EAAE,EAAEZ,IAAI,CAACa,GAAV;AAAeC,QAAAA,cAAc,EAAEN,eAA/B;AAAgDO,QAAAA,cAAc,EAAER;AAAhE,OAAd;AACArB,MAAAA,QAAQ,CAACZ,aAAa,CAACqC,OAAD,CAAd,CAAR;AACAzB,MAAAA,QAAQ,CAACX,eAAe,CAAC,IAAD,CAAhB,CAAR;AACD;AACF,GAhDoC,CAkDrC;;;AACA,QAAMyC,eAAe,GAAG,MAAM;AAC5BxB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAN,IAAAA,QAAQ,CAACX,eAAe,CAAC,KAAD,CAAhB,CAAR;AACD,GAHD,CAnDqC,CAyDrC;;;AACA,QAAM0C,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,QAAIA,MAAM,KAAK,eAAf,EAAgC;AAC9B3B,MAAAA,OAAO,CAAC,KAAD,CAAP;AACAM,MAAAA,MAAM,CAAC,CAAD,CAAN;AACD;AACF,GALD;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEkB,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,oBAAoB,MAA5B;AAA6B,MAAA,IAAI,EAAEzB,IAAnC;AAAyC,MAAA,OAAO,EAAE0B,WAAlD;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,SAAS,EAAC,sBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,6BAAf;AAA6C,UAAA,SAAS,EAAC,MAAvD;AAA8D,UAAA,EAAE,EAAE;AAAEG,YAAAA,OAAO,EAAE,MAAX;AAAmBC,YAAAA,QAAQ,EAAE;AAA7B,WAAlE;AAAA,kCACE,QAAC,WAAD;AAAa,YAAA,EAAE,EAAE;AAAEC,cAAAA,CAAC,EAAE,CAAL;AAAQC,cAAAA,QAAQ,EAAE;AAAlB,aAAjB;AAAA,mCACE,QAAC,MAAD;AACE,cAAA,SAAS,EAAC,2BADZ;AAEE,cAAA,MAAM,MAFR;AAGE,cAAA,QAAQ,EAAGL,KAAD,IAAW;AACnB,oBAAIM,MAAM,GAAGN,KAAK,CAACO,MAAN,CAAaC,KAA1B;AACA9B,gBAAAA,eAAe,CAACN,KAAK,CAACqC,IAAN,CAAW3B,IAAI,IAAIwB,MAAM,KAAKxB,IAAI,CAACa,GAAnC,CAAD,CAAf;AACD,eANH;AAAA,wBAQGvB,KAAK,CAACsC,GAAN,CAAU5B,IAAI,iBACb;AAAuB,gBAAA,KAAK,EAAEA,IAAI,CAACa,GAAnC;AAAA,0BAAyCb,IAAI,CAACM;AAA9C,iBAAaN,IAAI,CAACa,GAAlB;AAAA;AAAA;AAAA;AAAA,sBADD;AARH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAeE,QAAC,WAAD;AAAa,YAAA,SAAS,EAAC,wBAAvB;AAAgD,YAAA,EAAE,EAAE;AAAES,cAAAA,CAAC,EAAE,CAAL;AAAQC,cAAAA,QAAQ,EAAE;AAAlB,aAApD;AAAA,mCACE,QAAC,SAAD;AAAW,cAAA,UAAU,EAAE;AAAEM,gBAAAA,SAAS,EAAE,SAAb;AAAwBC,gBAAAA,OAAO,EAAE;AAAjC,eAAvB;AAAoE,cAAA,EAAE,EAAC,gBAAvE;AAAwF,cAAA,KAAK,EAAC,KAA9F;AAAoG,cAAA,OAAO,EAAC,UAA5G;AAAuH,cAAA,KAAK,EAAEjC,GAA9H;AAAmI,cAAA,QAAQ,EAAGqB,KAAD,IAASpB,MAAM,CAACoB,KAAK,CAACO,MAAN,CAAaC,KAAd;AAA5J;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAuBE,QAAC,aAAD;AAAe,QAAA,SAAS,EAAC,uBAAzB;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAET,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,MAAK;AACpBA,YAAAA,WAAW;AACXlB,YAAAA,QAAQ,CAACJ,YAAD,EAAcE,GAAd,CAAR;AACD,WAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD;;GAvGuBZ,Y;UACLb,W,EACAD,W;;;KAFKc,Y","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { fetchSodaData, postSodaStock, purchaseSuccess } from '../../../redux/sodaOperations/sodaSlice';\r\n\r\n// import { saveAs } from 'file-saver';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n//given an object convert to JSON\r\n// function fileDownLoad (soda, purchaseQty) {\r\n//   let purchase = {\r\n//     name: soda.name,\r\n//     price: soda.price,\r\n//     desc: soda.desc,\r\n//     qty: purchaseQty\r\n//   }\r\n//   let sodaJSON = new Blob(\r\n//     [JSON.stringify(purchase, null,4)],\r\n//     {\r\n//       type: \"application/json\"\r\n//     }\r\n//   )\r\n//   saveAs(sodaJSON, \"soda.json\")\r\n// }\r\n\r\nexport default function ControlPanel() {\r\n  const dispatch = useDispatch()\r\n  const sodaData = useSelector(state => state.sodaState.sodas)\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [sodas, setSoda] = React.useState(sodaData);  \r\n  const [selectedSoda, setSelectedSoda] = React.useState();//cola is the default\r\n  const [qty, setQty] = React.useState(0);\r\n  \r\n  useEffect(() => {\r\n    dispatch(fetchSodaData())\r\n    setSoda(sodaData)\r\n    setSelectedSoda(sodaData[0])\r\n  }, [open])\r\n\r\n\r\n  function purchase(soda, sodaQty){\r\n    //qty check\r\n    console.log('purchase attempt')\r\n    console.log(soda)\r\n\r\n    //check if soda is available\r\n    if(soda.quantity == 0){\r\n      alert(`${soda.name} has sold out -> Please Restock on Inventory page`)\r\n      return;\r\n    }  \r\n\r\n    //validate user input\r\n    if(sodaQty == 0){\r\n      alert('Please enter a QTY to purchase')\r\n      return;\r\n    }\r\n\r\n    //validate user input + complete purchase\r\n    if(sodaQty > soda.quantity){\r\n      alert(`Error: ${soda.quantity} ${soda.name} available`);\r\n    }else{\r\n      // fileDownLoad(soda, sodaQty);\r\n\r\n      //update soda Quantity\r\n      let newQTY = soda.quantity - sodaQty;\r\n\r\n      let purchasedAmount = parseInt(sodaQty) + parseInt(soda.purchased);\r\n\r\n      let payload = {id: soda._id, purchaseAmount: purchasedAmount, remainingStock: newQTY}\r\n      dispatch(postSodaStock(payload))\r\n      dispatch(purchaseSuccess(true))\r\n    }\r\n  }\r\n\r\n  //opens control panel -> mui function\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n    dispatch(purchaseSuccess(false))\r\n  };\r\n\r\n\r\n  //closes control panel -> mui function\r\n  const handleClose = (event, reason) => {\r\n    if (reason !== 'backdropClick') {\r\n      setOpen(false);\r\n      setQty(0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='controlPanel'>\r\n      <Button onClick={handleClickOpen}>Control Panel</Button>\r\n      <Dialog disableEscapeKeyDown open={open} onClose={handleClose}>\r\n        <DialogTitle className='control-panel-header'>Soda Selection</DialogTitle>\r\n        <DialogContent>\r\n          <Box className='control-panel-selection-box' component=\"form\" sx={{ display: 'flex', flexWrap: 'wrap' }}>\r\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n              <Select\r\n                className='control-panel-soda-select'\r\n                native\r\n                onChange={(event) => {\r\n                  let sodaId = event.target.value\r\n                  setSelectedSoda(sodas.find(soda => sodaId === soda._id));                  \r\n                }}\r\n              >\r\n                {sodas.map(soda => (\r\n                  <option key={soda._id} value={soda._id}>{soda.name}</option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl className='control-panel-soda-qty' sx={{ m: 1, minWidth: 120 }}>\r\n              <TextField inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }} id=\"outlined-basic\" label=\"Qty\" variant=\"outlined\" value={qty} onChange={(event)=>setQty(event.target.value)}/>\r\n            </FormControl>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions className='control-panel-btn-box'>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={() =>{\r\n            handleClose();\r\n            purchase(selectedSoda,qty);\r\n          }}>\r\n            Purchase\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}