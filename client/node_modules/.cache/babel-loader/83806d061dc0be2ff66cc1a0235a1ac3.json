{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport * as sodaApi from '../../sodaApi/api'; // const sodaTest = [\n//     {\"_id\":{\"$oid\":\"61c8cef81aca48e3ce06ace0\"},\"name\":\"Cola\",\"desc\":\"A basic no nonsense cola that is the perfect pick me up for any occasion.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F6AF65\"},\n//     {\"_id\":{\"$oid\":\"61c8cf571aca48e3ce06ace1\"},\"name\":\"MegaPop\",\"desc\":\"Not for the faint of heart. So flavorful and so invigorating, it should probably be illegal.\",\"price\":\"1.0\",\"quantity\":\"25\",\"maxQuantity\":\"50\",\"available\":true,\"hexColorCode\":\"823038\"},\n//     {\"_id\":{\"$oid\":\"61c8cf6b1aca48e3ce06ace2\"},\"name\":\"Pop\",\"desc\":\"An explosion of flavor that will knock your socks off!\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"00C2D1\"},\n//     {\"_id\":{\"$oid\":\"61c8cf9f1aca48e3ce06ace3\"},\"name\":\"Fizz\",\"desc\":\"An effervescent fruity experience with hints of grape and coriander.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F9E900\"}\n//   ]\n//get soda to set initial state (thunk)\n\nexport const fetchSodaData = createAsyncThunk('soda/getSodas', async () => {\n  const response = await sodaApi.getSodas();\n  return response;\n}); //update soda price\n////Return error or success for each and update the UI accordingly\n\nexport const postSodaPrice = createAsyncThunk('sodas/updateSodaPrice', async data => {\n  const {\n    id,\n    price\n  } = data;\n  const response = await sodaApi.updateSodaPrice(id, price);\n  console.log(response.data);\n  return response;\n}); //update soda stock after purchase\n\nexport const postSodaStock = createAsyncThunk('sodas/updateSodaStock', async data => {\n  console.log(data);\n  const {\n    id,\n    purchase,\n    remaining\n  } = data;\n  const response = await sodaApi.updateSodaStock(data.id, data.purchaseAmount, data.remainingStock);\n  console.log(response.data);\n  return response;\n}); //restock soda\n\nexport const postRestockSoda = createAsyncThunk('sodas/restockSoda', async data => {\n  const {\n    id,\n    maxQty\n  } = data;\n  const respone = await sodaApi.restockSoda(id, maxQty);\n  return respone;\n}); //redux-slice\n\nconst SodaSlice = createSlice({\n  name: 'sodaSlice',\n  initialState: {\n    loading: 'loading',\n    apiStatus: '',\n    sodas: []\n  },\n  reducers: {\n    purchaseSoda: (state, action) => {\n      console.log(action);\n      return action.payload;\n    },\n    updateSodaPrice: (state, action) => {\n      //call API\n      return action.payload;\n      console.log(state);\n    },\n    restockSoda: (state, action) => {\n      return action.payload;\n      console.log(state);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchSodaData.fulfilled, (state, action) => {\n      //set soda data\n      state.sodas = action.payload;\n    });\n    builder.addCase(postSodaPrice.fulfilled, (state, action) => {\n      //return new soda price\n      console.log(action.payload);\n      state.apiStatus = action.payload;\n    });\n    builder.addCase(postSodaStock.fulfilled, (state, action) => {\n      //return soda stock\n      console.log(action.payload);\n      state.apiStatus = action.payload;\n    });\n    builder.addCase(postRestockSoda.fulfilled, (state, action) => {\n      //return full stocked soda\n      console.log(action.payload);\n      state.apiStatus = action.payload;\n    });\n  }\n}); //I'll need to get soda data after every update to soda data\n//to be more efficient send only updated soda information vs all soda data\n//need to create a thunk for each API call and then dispatch fetchSodaData after each operation\n\nexport const {\n  purchaseSoda,\n  updateSodaPrice,\n  restockSoda,\n  loadingData,\n  dataLoaded\n} = SodaSlice.actions;\nexport default SodaSlice.reducer;","map":{"version":3,"sources":["C:/webdev/sodaProject/client/src/redux/sodaOperations/sodaSlice.js"],"names":["createSlice","createAsyncThunk","sodaApi","fetchSodaData","response","getSodas","postSodaPrice","data","id","price","updateSodaPrice","console","log","postSodaStock","purchase","remaining","updateSodaStock","purchaseAmount","remainingStock","postRestockSoda","maxQty","respone","restockSoda","SodaSlice","name","initialState","loading","apiStatus","sodas","reducers","purchaseSoda","state","action","payload","extraReducers","builder","addCase","fulfilled","loadingData","dataLoaded","actions","reducer"],"mappings":"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","sourcesContent":["import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport * as sodaApi from '../../sodaApi/api'\r\n\r\n\r\n// const sodaTest = [\r\n//     {\"_id\":{\"$oid\":\"61c8cef81aca48e3ce06ace0\"},\"name\":\"Cola\",\"desc\":\"A basic no nonsense cola that is the perfect pick me up for any occasion.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F6AF65\"},\r\n//     {\"_id\":{\"$oid\":\"61c8cf571aca48e3ce06ace1\"},\"name\":\"MegaPop\",\"desc\":\"Not for the faint of heart. So flavorful and so invigorating, it should probably be illegal.\",\"price\":\"1.0\",\"quantity\":\"25\",\"maxQuantity\":\"50\",\"available\":true,\"hexColorCode\":\"823038\"},\r\n//     {\"_id\":{\"$oid\":\"61c8cf6b1aca48e3ce06ace2\"},\"name\":\"Pop\",\"desc\":\"An explosion of flavor that will knock your socks off!\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"00C2D1\"},\r\n//     {\"_id\":{\"$oid\":\"61c8cf9f1aca48e3ce06ace3\"},\"name\":\"Fizz\",\"desc\":\"An effervescent fruity experience with hints of grape and coriander.\",\"price\":\"1.0\",\"quantity\":\"100\",\"maxQuantity\":\"200\",\"available\":true,\"hexColorCode\":\"F9E900\"}\r\n//   ]\r\n\r\n//get soda to set initial state (thunk)\r\nexport const fetchSodaData = createAsyncThunk(\r\n    'soda/getSodas',\r\n    async () => {\r\n        const response = await sodaApi.getSodas();\r\n        return response;\r\n});\r\n\r\n//update soda price\r\n////Return error or success for each and update the UI accordingly\r\nexport const postSodaPrice = createAsyncThunk(\r\n    'sodas/updateSodaPrice',\r\n    async (data) => {\r\n        const {id, price} = data;\r\n        const response = await sodaApi.updateSodaPrice(id, price);\r\n        console.log(response.data)\r\n        return response;\r\n})\r\n\r\n//update soda stock after purchase\r\nexport const postSodaStock = createAsyncThunk(\r\n    'sodas/updateSodaStock',\r\n    async (data) => {\r\n        console.log(data)\r\n        const {id, purchase, remaining} = data;\r\n        const response = await sodaApi.updateSodaStock(data.id, data.purchaseAmount, data.remainingStock);\r\n        console.log(response.data)\r\n        return response;\r\n    }\r\n)\r\n\r\n//restock soda\r\nexport const postRestockSoda = createAsyncThunk(\r\n    'sodas/restockSoda',\r\n    async (data) => {\r\n        const {id, maxQty} = data\r\n        const respone = await sodaApi.restockSoda(id, maxQty)\r\n        return respone;\r\n    }\r\n)\r\n\r\n\r\n//redux-slice\r\nconst SodaSlice = createSlice({\r\n    name: 'sodaSlice',\r\n    initialState: {\r\n        loading: 'loading',\r\n        apiStatus: '',\r\n        sodas: []\r\n    },\r\n    reducers : {\r\n        purchaseSoda: (state, action) => {\r\n            console.log(action)\r\n            return action.payload\r\n        },\r\n        updateSodaPrice: (state, action) => {\r\n            //call API\r\n            return action.payload\r\n            console.log(state)\r\n        },\r\n        restockSoda: (state, action) => {\r\n            return action.payload\r\n            console.log(state)\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchSodaData.fulfilled, (state, action) => {\r\n            //set soda data\r\n            state.sodas = action.payload\r\n        })\r\n        builder.addCase(postSodaPrice.fulfilled, (state, action) => {\r\n            //return new soda price\r\n            console.log(action.payload)\r\n\r\n            state.apiStatus = action.payload\r\n        })\r\n        builder.addCase(postSodaStock.fulfilled, (state, action) => {\r\n            //return soda stock\r\n            console.log(action.payload)\r\n            state.apiStatus = action.payload\r\n        })\r\n        builder.addCase(postRestockSoda.fulfilled, (state, action) => {\r\n            //return full stocked soda\r\n            console.log(action.payload)\r\n            state.apiStatus = action.payload\r\n        })\r\n    }\r\n})\r\n\r\n//I'll need to get soda data after every update to soda data\r\n//to be more efficient send only updated soda information vs all soda data\r\n\r\n\r\n//need to create a thunk for each API call and then dispatch fetchSodaData after each operation\r\n\r\nexport const {purchaseSoda, updateSodaPrice, restockSoda, loadingData, dataLoaded} = SodaSlice.actions\r\nexport default SodaSlice.reducer"]},"metadata":{},"sourceType":"module"}