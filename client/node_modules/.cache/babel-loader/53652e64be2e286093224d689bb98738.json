{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\sodaProject\\\\soda-app\\\\src\\\\components\\\\vendingMachine\\\\ControlPanel.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport * as api from '../../api/api';\nimport axios from 'axios'; //redux\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { saveAs } from 'file-saver';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport TextField from '@mui/material/TextField'; //given an object convert to JSON\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction fileDownLoad(soda, purchaseQty) {\n  let purchase = {\n    name: soda.name,\n    price: soda.price,\n    desc: soda.desc,\n    qty: purchaseQty\n  };\n  console.log(purchase);\n  let sodaJSON = new Blob([JSON.stringify(purchase, null, 4)], {\n    type: \"application/json\"\n  });\n  saveAs(sodaJSON, \"soda.json\");\n}\n\nexport default function DialogSelect() {\n  _s();\n\n  const dispatch = useDispatch();\n  const accountBalance = useSelector(state => state.sodaApp.accountBalance);\n  const [open, setOpen] = React.useState(false);\n  const [succesfulPurchase, setSuccessfulPurcahse] = React.useState();\n  const [sodas, setSoda] = React.useState([]); //sodaList\n\n  const [selectedSoda, setSelectedSoda] = React.useState(); //cola is the default\n\n  const [acctBalance, setAccBalance] = React.useState(5);\n  const [qty, setQty] = React.useState(0); //soda quantity\n  //calling Server to set soda state\n\n  useEffect(async () => {\n    const response = api.fetchSodas().then(res => setInitialSodaStates(res.data));\n  }, []); //calling server to update sodas\n\n  useEffect(async () => {\n    const response = api.updateSoda(0, selectedSoda);\n  }, [succesfulPurchase]); //after a successful purchase is made\n\n  function setInitialSodaStates(data) {\n    setSoda(data);\n    setSelectedSoda(data[0]);\n  } //keeps track of soda selected\n\n\n  const handleSodaInput = event => {\n    setSelectedSoda(event.target.value);\n  }; //keeps track of soda quantity input\n\n\n  const handleQtyInput = event => {\n    setQty(Number(event.target.value) || '');\n  };\n\n  function purchase(selectedSoda, qty) {\n    //qty check\n    if (qty > selectedSoda.quantity) {\n      alert(`Only ${selectedSoda.quantity} ${selectedSoda.name} available`);\n    } else {\n      fileDownLoad(selectedSoda, qty); //update soda Quantity\n\n      setSuccessfulPurcahse(true);\n    }\n  } //opens control panel\n\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  }; //closes control panel\n\n\n  const handleClose = (event, reason) => {\n    if (reason !== 'backdropClick') {\n      setOpen(false);\n      setSuccessfulPurcahse(false); //resetting the successfulPurchase\n    }\n  };\n\n  console.log(sodas); // console.log(selectedSoda._id)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controlPanel\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClickOpen,\n      children: \"Control Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      disableEscapeKeyDown: true,\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Soda Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          sx: {\n            display: 'flex',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              native: true,\n              onChange: handleSodaInput,\n              children: sodas.map(x => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: x.value,\n                children: x.name\n              }, x._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              inputProps: {\n                inputMode: 'numeric',\n                pattern: '[0-9]*'\n              },\n              id: \"outlined-basic\",\n              label: \"Qty\",\n              variant: \"outlined\",\n              value: qty,\n              onChange: event => handleQtyInput(event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            handleClose();\n            purchase(selectedSoda, qty);\n          },\n          children: \"Purchase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DialogSelect, \"X2UytOpmvyu30b9fdRRcoryRlpw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DialogSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogSelect\");","map":{"version":3,"sources":["C:/webdev/sodaProject/soda-app/src/components/vendingMachine/ControlPanel.jsx"],"names":["React","useEffect","api","axios","useSelector","useDispatch","saveAs","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","InputLabel","FormControl","Select","TextField","fileDownLoad","soda","purchaseQty","purchase","name","price","desc","qty","console","log","sodaJSON","Blob","JSON","stringify","type","DialogSelect","dispatch","accountBalance","state","sodaApp","open","setOpen","useState","succesfulPurchase","setSuccessfulPurcahse","sodas","setSoda","selectedSoda","setSelectedSoda","acctBalance","setAccBalance","setQty","response","fetchSodas","then","res","setInitialSodaStates","data","updateSoda","handleSodaInput","event","target","value","handleQtyInput","Number","quantity","alert","handleClickOpen","handleClose","reason","display","flexWrap","m","minWidth","map","x","_id","inputMode","pattern"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport * as api from '../../api/api'\r\nimport axios from 'axios';\r\n\r\n//redux\r\nimport { useSelector, useDispatch} from 'react-redux';\r\n\r\nimport { saveAs } from 'file-saver';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\n\r\n//given an object convert to JSON\r\nfunction fileDownLoad (soda, purchaseQty) {\r\n  let purchase = {\r\n    name: soda.name,\r\n    price: soda.price,\r\n    desc: soda.desc,\r\n    qty: purchaseQty\r\n  }\r\n  console.log(purchase)\r\n  let sodaJSON = new Blob(\r\n    [JSON.stringify(purchase, null,4)],\r\n    {\r\n      type: \"application/json\"\r\n    }\r\n  )\r\n  saveAs(sodaJSON, \"soda.json\")\r\n}\r\n\r\n\r\nexport default function DialogSelect() {\r\n\r\n  const dispatch = useDispatch();\r\n  const accountBalance = useSelector((state) => state.sodaApp.accountBalance)\r\n\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [succesfulPurchase, setSuccessfulPurcahse] = React.useState();\r\n  const [sodas, setSoda] = React.useState([]);//sodaList\r\n  const [selectedSoda, setSelectedSoda] = React.useState();//cola is the default\r\n  const [acctBalance, setAccBalance] = React.useState(5);\r\n  const [qty, setQty] = React.useState(0);//soda quantity\r\n\r\n//calling Server to set soda state\r\nuseEffect(async () => {\r\n  const response = api.fetchSodas().then((res) => setInitialSodaStates(res.data));\r\n}, []);\r\n\r\n//calling server to update sodas\r\nuseEffect(async () => {\r\n  const response = api.updateSoda(0, selectedSoda)\r\n},\r\n[succesfulPurchase])//after a successful purchase is made\r\n  \r\nfunction setInitialSodaStates(data){\r\n  setSoda(data);\r\n  setSelectedSoda(data[0])\r\n}\r\n  //keeps track of soda selected\r\n  const handleSodaInput = (event) => {\r\n    setSelectedSoda((event.target.value));\r\n  };\r\n\r\n  //keeps track of soda quantity input\r\n  const handleQtyInput = (event) => {\r\n    setQty(Number(event.target.value) || '');\r\n  }\r\n\r\nfunction purchase (selectedSoda, qty){\r\n  //qty check\r\n  if(qty>selectedSoda.quantity){\r\n    alert(`Only ${selectedSoda.quantity} ${selectedSoda.name} available`);\r\n  }else{\r\n    fileDownLoad(selectedSoda, qty);\r\n    //update soda Quantity\r\n    setSuccessfulPurcahse(true);\r\n  }\r\n}\r\n  //opens control panel\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  //closes control panel\r\n  const handleClose = (event, reason) => {\r\n    if (reason !== 'backdropClick') {\r\n      setOpen(false);\r\n      setSuccessfulPurcahse(false); //resetting the successfulPurchase\r\n    }\r\n  };\r\n\r\nconsole.log(sodas)\r\n// console.log(selectedSoda._id)\r\n\r\n  return (\r\n    <div className='controlPanel'>\r\n      <Button onClick={handleClickOpen}>Control Panel</Button>\r\n      <Dialog disableEscapeKeyDown open={open} onClose={handleClose}>\r\n        <DialogTitle>Soda Selection</DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" sx={{ display: 'flex', flexWrap: 'wrap' }}>\r\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n              <Select\r\n                native\r\n                onChange={handleSodaInput}\r\n              >\r\n                {sodas.map(x => (\r\n                  <option key={x._id} value={x.value}>{x.name}</option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n              <TextField inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }} id=\"outlined-basic\" label=\"Qty\" variant=\"outlined\" value={qty} onChange={(event)=>handleQtyInput(event)}/>\r\n            </FormControl>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={() =>{\r\n            handleClose();\r\n            purchase(selectedSoda,qty);\r\n          }}>\r\n            Purchase\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}