{"ast":null,"code":"var _jsxFileName = \"C:\\\\webdev\\\\sodaProject\\\\soda-app\\\\src\\\\components\\\\vendingMachine\\\\ControlPanel.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport * as api from '../../api/api';\nimport axios from 'axios'; //redux\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getSodas, updateSoda } from '../../redux/VendingMachine/VendingMachineSlice';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport TextField from '@mui/material/TextField'; //set the sodas with a get request from the server\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = 'http://localhost:3001/inventory';\nexport default function DialogSelect() {\n  _s();\n\n  const dispatch = useDispatch();\n  const accountBalance = useSelector(state => state.sodaApp.accountBalance);\n  const [open, setOpen] = React.useState(false);\n  const [soda, setSoda] = React.useState([]); //soda selected - Cola as the default\n\n  const [acctBalance, setAccBalance] = React.useState(5);\n  const [qty, setQty] = React.useState(0); //soda quantity\n  //calling Server to set soda state\n\n  useEffect(async () => {\n    const response = api.fetchSodas().then(res => setSoda(res.data));\n  }, []);\n\n  const handleSodaInput = event => {\n    setSoda(event.target.value);\n  };\n\n  const handleQtyInput = event => {\n    setQty(Number(event.target.value) || '');\n    console.log(qty);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason !== 'backdropClick') {\n      setOpen(false);\n    }\n  };\n\n  console.log(soda);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controlPanel\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClickOpen,\n      children: \"Control Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      disableEscapeKeyDown: true,\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Soda Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          sx: {\n            display: 'flex',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"demo-dialog-native\",\n              children: \"Soda\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              native: true,\n              defaultValue: null,\n              onChange: handleSodaInput,\n              children: soda.map(x => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: x.name,\n                children: x.name\n              }, x._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            sx: {\n              m: 1,\n              minWidth: 120\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              inputProps: {\n                inputMode: 'numeric',\n                pattern: '[0-9]*'\n              },\n              id: \"outlined-basic\",\n              label: \"Qty\",\n              variant: \"outlined\",\n              value: qty,\n              onChange: event => handleQtyInput(event)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            handleClose(); // dispatch(updateSodaQuantity({soda, qty}));\n          },\n          children: \"Purchase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DialogSelect, \"7gd2ah6qitvf4J4CRgFGvM573jI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DialogSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogSelect\");","map":{"version":3,"sources":["C:/webdev/sodaProject/soda-app/src/components/vendingMachine/ControlPanel.jsx"],"names":["React","useEffect","api","axios","useSelector","useDispatch","getSodas","updateSoda","Box","Button","Dialog","DialogActions","DialogContent","DialogTitle","InputLabel","FormControl","Select","TextField","url","DialogSelect","dispatch","accountBalance","state","sodaApp","open","setOpen","useState","soda","setSoda","acctBalance","setAccBalance","qty","setQty","response","fetchSodas","then","res","data","handleSodaInput","event","target","value","handleQtyInput","Number","console","log","handleClickOpen","handleClose","reason","display","flexWrap","m","minWidth","map","x","name","_id","inputMode","pattern"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport * as api from '../../api/api'\r\nimport axios from 'axios';\r\n\r\n//redux\r\nimport { useSelector, useDispatch} from 'react-redux';\r\nimport { getSodas, updateSoda} from '../../redux/VendingMachine/VendingMachineSlice';\r\n\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\n\r\n//set the sodas with a get request from the server\r\nconst url = 'http://localhost:3001/inventory'; \r\nexport default function DialogSelect() {\r\n\r\n  const dispatch = useDispatch();\r\n  const accountBalance = useSelector((state) => state.sodaApp.accountBalance)\r\n\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [soda, setSoda] = React.useState([]);//soda selected - Cola as the default\r\n  const [acctBalance, setAccBalance] = React.useState(5);\r\n  const [qty, setQty] = React.useState(0);//soda quantity\r\n\r\n//calling Server to set soda state\r\nuseEffect(async () => {\r\n  const response = api.fetchSodas().then((res) => setSoda(res.data))\r\n}, [])\r\n  \r\n  const handleSodaInput = (event) => {\r\n    setSoda((event.target.value));\r\n  };\r\n\r\n  const handleQtyInput = (event) => {\r\n    setQty(Number(event.target.value) || '');\r\n    console.log(qty)\r\n  }\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason !== 'backdropClick') {\r\n      setOpen(false);\r\n    }\r\n  };\r\n\r\nconsole.log(soda)\r\n\r\n  return (\r\n    <div className='controlPanel'>\r\n      <Button onClick={handleClickOpen}>Control Panel</Button>\r\n      <Dialog disableEscapeKeyDown open={open} onClose={handleClose}>\r\n        <DialogTitle>Soda Selection</DialogTitle>\r\n        <DialogContent>\r\n          <Box component=\"form\" sx={{ display: 'flex', flexWrap: 'wrap' }}>\r\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n              <InputLabel htmlFor=\"demo-dialog-native\">Soda</InputLabel>\r\n              <Select\r\n                native\r\n                defaultValue={null}\r\n                onChange={handleSodaInput}\r\n              >\r\n                {soda.map(x => (\r\n                  <option key={x._id} value={x.name}>{x.name}</option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n              <TextField inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }} id=\"outlined-basic\" label=\"Qty\" variant=\"outlined\" value={qty} onChange={(event)=>handleQtyInput(event)}/>\r\n            </FormControl>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={() =>{\r\n            handleClose();\r\n            // dispatch(updateSodaQuantity({soda, qty}));\r\n          }}>\r\n            Purchase\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}